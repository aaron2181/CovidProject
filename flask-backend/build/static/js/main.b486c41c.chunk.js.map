{"version":3,"sources":["logo.svg","components/UploadFile.js","components/ImagePreview.js","components/Table.js","components/DraggableUploader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","columnDefs","headerName","field","sortable","rowData","data","Confidence","Diagnosis","length","setState","concat","toConsumableArray","react_default","a","createElement","className","style","height","width","main","DraggableUploader","onUpload","_this$state","loadedFiles","fd","console","log","map","file","idx","newFile","updateLoadedFile","objectSpread","isUploading","axios","post","then","res","filename","get","diagnosis","confidence","dataObject","Patient_ID","catch","err","setTimeout","e","_this2","currentTarget","files","FormData","fileReader","FileReader","append","name","onload","result","addLoadedFile","onabort","alert","onerror","readAsDataURL","prevState","_","filter","ldFile","oldFile","find","_this3","display","flexDirection","type","id","ref","input","fileInput","onDragOver","preventDefault","stopPropagation","onDrop","onFileLoad","bind","onChange","key","src","progressBar","onClick","removeLoadedFile","react_icons_kit","icon","remove","size","buttons","text","intent","Intent","PRIMARY","minimal","click","SUCCESS","components_Table","React","App","DraggableUploader_DraggableUploader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b486c41c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport axios from 'axios';\n\nclass UploadFile extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedFile: null,\n            diagnosis: null,\n            confidence: null,\n        }\n    }\n\n    selectFileHandler = e => {\n        let files = e.target.files[0];\n        this.setState({\n            selectedFile: files,\n        })\n    }\n\n    fileUploadHandler = () => {\n        const fd = new FormData();\n        fd.append('image', this.state.selectedFile, this.state.selectedFile.name);\n        axios.post('/upload', fd, {\n            onUploadProgress: progressEvent => {\n                console.log('Upload Progress: ' + Math.round(progressEvent.loaded / progressEvent.total * 100) + '%');\n            }\n        })\n            .then(res => {\n                console.log(res);\n                let filename = res.data;\n                axios.get('localhost:5000/predict?fileName=' + filename)\n                    .then(res => {\n                        console.log('hi');\n                        console.log(res);\n                        let { confidence, diagnosis } = res.data\n                        this.setState({\n                            confidence: confidence,\n                            diagnosis: diagnosis,\n                        })\n                    })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"Upload\">\n                <input type=\"file\" onChange={this.selectFileHandler} />\n                <button onClick={this.fileUploadHandler}>Upload</button>\n                {this.state.diagnosis != null && this.state.diagnosis}\n                {this.state.confidence != null && this.state.confidence}\n            </div>\n        )\n    }\n}\n\nexport default UploadFile","// Example at: https://codepen.io/hartzis/pen/VvNGZP\nimport React, { Component } from 'react'\n\nclass ImagePreview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: '',\n            imagePreviewUrl: ''\n        };\n        this._handleImageChange = this._handleImageChange.bind(this);\n        this._handleSubmit = this._handleSubmit.bind(this);\n    }\n\n    _handleSubmit(e) {\n        e.preventDefault();\n        // TODO: do something with -> this.state.file\n    }\n \n    _handleImageChange(e) {\n        e.preventDefault();\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            this.setState({\n                file: file,\n                imagePreviewUrl: reader.result\n            });\n        }\n \n        reader.readAsDataURL(file)\n    }\n\n    render() {\n        let { imagePreviewUrl } = this.state;\n        let $imagePreview = null;\n        if (imagePreviewUrl) {\n            $imagePreview = (<img src={imagePreviewUrl} />);\n        }\n\n        return (\n            <div>\n                <form onSubmit={this._handleSubmit}>\n                    <input type=\"file\" onChange={this._handleImageChange} />\n                    <button type=\"submit\" onClick={this._handleSubmit}>Upload Image</button>\n                </form>\n                {$imagePreview}\n            </div>\n        )\n    }\n\n}\n\nexport default ImagePreview","import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columnDefs: [{\n                headerName: \"Patient_ID\", field: \"Patient_ID\", sortable: true\n            }, {\n                headerName: \"Confidence\", field: \"Confidence\", sortable: true\n            }, {\n                headerName: \"Diagnosis\", field: \"Diagnosis\", sortable: true\n            }],\n            rowData: []\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        if (props.data.Confidence != '' && props.data.Diagnosis != '' && this.props.data != this.state.rowData[this.state.rowData.length - 1])\n            this.setState({\n                rowData: [...this.state.rowData, props.data]\n            })\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ag-theme-balham\"\n                style={{\n                    height: '500px',\n                    width: '600px'\n                }}\n            >\n                <AgGridReact\n                    columnDefs={this.state.columnDefs}\n                    rowData={this.state.rowData}>\n                </AgGridReact>\n            </div>\n        );\n    }\n}\n\nexport default Table;","import React from \"react\";\n\nimport { AnchorButton, Intent, ProgressBar } from \"@blueprintjs/core\";\n\nimport _ from \"lodash\";\n\nimport { Icon } from \"react-icons-kit\";\nimport { remove } from 'react-icons-kit/fa/remove';\nimport './assets/DraggableUploader.scss'\nimport axios from 'axios'\nimport Table from './Table'\nexport default class DraggableUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadedFiles: [],\n      fd: '',\n      confidence: '',\n      diagnosis: '',\n      dataObject: {\n        Patient_ID: '',\n        Confidence: '',\n        Diagnosis: '',        \n      },\n    };\n  }\n\n  onFileLoad(e) {\n    const file = e.currentTarget.files[0];\n    let fd = new FormData();\n    console.log(fd);\n    let fileReader = new FileReader();\n    fd.append('image', file, file.name)\n    this.setState({ fd: fd })\n    fileReader.onload = () => {\n      console.log(\"IMAGE LOADED: \", fileReader.result);\n      const file = {\n        data: fileReader.result,\n        isUploading: false\n      }\n      //Add file\n      this.addLoadedFile(file);\n    }\n\n    fileReader.onabort = () => {\n      alert(\"Reading Aborted\");\n    }\n\n    fileReader.onerror = () => {\n      alert(\"Reading ERROR!\");\n    }\n\n    fileReader.readAsDataURL(file);\n  }\n\n  addLoadedFile(file) {\n    this.setState((prevState) => ({\n      loadedFiles: [\n        ...prevState.loadedFiles,\n        file\n      ]\n    }));\n  }\n\n  removeLoadedFile(file) {\n    //Remove file from the State\n    this.setState((prevState) => {\n      let loadedFiles = prevState.loadedFiles;\n      let newLoadedFiles = _.filter(loadedFiles, (ldFile) => {\n        return ldFile != file;\n      });\n      return { loadedFiles: newLoadedFiles };\n    });\n  }\n\n  removeAllLoadedFile() {\n    this.setState({ loadedFiles: [] });\n  }\n\n  updateLoadedFile(oldFile, newFile) {\n    this.setState((prevState) => {\n\n      const loadedFiles = [...prevState.loadedFiles];\n      _.find(loadedFiles, (file, idx) => {\n        if (file == oldFile)\n          loadedFiles[idx] = newFile;\n      }\n      );\n\n      return { loadedFiles };\n    });\n\n    return newFile;\n  }\n\n  onUpload  = () => {\n    const { loadedFiles, fd } = this.state;\n    console.log('ON UPLOAD...')\n    loadedFiles.map((file, idx) => {\n      console.log(\"Updating...\");\n      //Update file (Change it's state to uploading)\n      let newFile = this.updateLoadedFile(file, {\n        ...file,\n        isUploading: true\n      });\n\n      axios.post('/upload', fd)\n        .then(res => {\n          console.log(res);\n          let filename = res.data;\n          axios.get('/predict?fileName=' + filename)\n            .then(res => {\n              console.log('hi');\n              console.log(res);\n              let diagnosis = res.data.diagnosis\n              let confidence = res.data.confidence\n              this.setState({\n                dataObject: {\n                  Confidence: confidence,\n                  Diagnosis: diagnosis,\n                  Patient_ID: '1',\n                }\n              })\n            })\n        })\n        .catch(err => {\n          console.log(err);\n        })\n\n      //Simulate a REAL WEB SERVER DOING IMAGE UPLOADING\n      setTimeout(() => {\n        //Get it back to it's original State\n        this.updateLoadedFile(newFile, {\n          ...newFile,\n          isUploading: false\n        });\n      }, 3000);\n\n    });\n  }\n\n  render() {\n    const { loadedFiles } = this.state;\n\n    return (\n      <div\n        className=\"inner-container\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\"\n        }}>\n        <div className=\"sub-header\">Drag an Image</div>\n        <div className=\"draggable-container\">\n          <input\n            type=\"file\"\n            id=\"file-browser-input\"\n            name=\"file-browser-input\"\n            ref={input => this.fileInput = input}\n            onDragOver={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n            }}\n            onDrop={this\n              .onFileLoad\n              .bind(this)}\n            onChange={this\n              .onFileLoad\n              .bind(this)} />\n          <div className=\"files-preview-container ip-scrollbar\">\n            {loadedFiles.map((file, idx) => {\n              return <div className=\"file\" key={idx}>\n                <img src={file.data} />\n                <div className=\"container\">\n                  <span className=\"progress-bar\">\n                    {file.isUploading && <ProgressBar />}\n                  </span>\n                  <span className=\"remove-btn\" onClick={() => this.removeLoadedFile(file)}>\n                    <Icon icon={remove} size={19} />\n                  </span>\n                </div>\n              </div>\n            })}\n          </div>\n          <div className=\"helper-text\">Drag and Drop Images Here</div>\n          <div className=\"file-browser-container\">\n            <AnchorButton\n              text=\"Browse\"\n              intent={Intent.PRIMARY}\n              minimal={true}\n              onClick={() => this.fileInput.click()} />\n          </div>\n        </div>\n        <AnchorButton\n          text=\"Upload\"\n          intent={Intent.SUCCESS}\n          onClick={this\n            .onUpload\n            .bind(this)} />\n        {this.state.dataObject.confidence!='' && this.state.dataObject.diagnosis!='' && <Table data={this.state.dataObject}/>}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport UploadFile from './components/UploadFile'\nimport ImagePreview from './components/ImagePreview'\nimport DraggableUploader from './components/DraggableUploader'\nimport Dropzone from 'react-dropzone'\nimport Table from './components/Table'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">        \n        <DraggableUploader />\n        {/* <UploadFile /> */}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}